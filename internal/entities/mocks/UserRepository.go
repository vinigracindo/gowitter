// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "github.com/vinigracindo/gowitter/internal/entities"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, email, username, password
func (_m *UserRepository) Create(name string, email string, username string, password string) (*entities.User, error) {
	ret := _m.Called(name, email, username, password)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(string, string, string, string) *entities.User); ok {
		r0 = rf(name, email, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(name, email, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUserRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t NewUserRepositoryT) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
